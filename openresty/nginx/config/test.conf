server {
    listen 80;
    # 这里添加了 https, 如果不需要可以去掉
    listen 443 ssl;
    server_name test.hujingnb.com;

    access_log /var/log/nginx/test.access.log;
    error_log /var/log/nginx/test.error.log;



    ssl_certificate /cert/hujingnb.com.cer;
    ssl_certificate_key /cert/hujingnb.com.key;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

    location / {
        # 请求转发
        proxy_pass http://httpbin.org/get;

        # 将请求信息暂存, 放到最后一起打印
        access_by_lua_block {
          ngx.req.read_body()
          local req_body = ngx.req.get_body_data()
          local req_uri = ngx.var.request_uri
          local req_method = ngx.var.request_method
          if req_body and #req_body > 1024 * 1024 then
            req_body = "Request too large"
          end
          if not req_body then
            req_body = "No request body"
          end
          local headers = ngx.req.get_headers()
          local header_str = ""
          for k, v in pairs(headers) do
            header_str = header_str .. string.format("%s: %s\n", k, v)
          end
          ngx.ctx.req_info = {
            uri = req_uri,
            body = req_body,
            method = req_method,
            headers = header_str
          }
        }

        body_filter_by_lua_block {
          local req_info = ngx.ctx.req_info or {}
            local req_uri = req_info.uri or "Unknown URI"
            local req_body = req_info.body or "Unknown Request Body"
            local req_method = req_info.method or "Unknown Method"
            local req_headers = req_info.headers or "Unknown Headers"
            local resp_headers = ngx.resp.get_headers()
            local resp_header_str = ""
            for k, v in pairs(resp_headers) do
                resp_header_str = resp_header_str .. string.format("%s: %s\n", k, v)
            end

            if ngx.ctx.buffered_resp_body == nil then
                ngx.ctx.buffered_resp_body = ""
                ngx.ctx.buffered_resp_size = 0
            end

            local current_chunk = ngx.arg[1] or ""
            ngx.ctx.buffered_resp_body = ngx.ctx.buffered_resp_body .. current_chunk
            ngx.ctx.buffered_resp_size = ngx.ctx.buffered_resp_size + #current_chunk

            if ngx.ctx.buffered_resp_size > 1024 * 1024 then
                ngx.ctx.buffered_resp_body = "Response body too large to log"
            end
            if ngx.arg[2] then
                ngx.log(ngx.ERR, string.format(
                    "Request Method: %s\nRequest URI: %s\nRequest Headers:\n%sRequest Body: %s\nResponse Headers:\n%sResponse Body: %s\n",
                    req_method,
                    req_uri,
                    req_headers,
                    req_body,
                    resp_header_str,
                    ngx.ctx.buffered_resp_body
                ))
            end
        }
    }
}
